1. Docker 설치
https://docs.docker.com/desktop/setup/install/windows-install/


2. (Deprecated) 명령프롬프트에서 우분투 이미지 생성 후 자바 설치
- Windows 키 + R → cmd 또는 PowerShell 열기
- 아래 명령어 입력:
  $ docker run -it --name market-follower-ubuntu ubuntu bash
- 이후 우분투가 실행되면 다음의 명령어 입력:
  $ apt update
  $ apt install openjdk-17-jdk -y
  $ java -version


3. Dockerfile 생성
'''
# 1단계: 빌드 스테이지 (Gradle 7.5 + JDK 17 이미지 사용)
FROM gradle:7.5-jdk17 AS build

# 작업 디렉토리를 /app 으로 설정
WORKDIR /app

# Gradle 빌드 스크립트 파일들을 복사
COPY build.gradle settings.gradle ./

# 소스 코드 전체를 복사
COPY src ./src

# Gradle 빌드 실행 (테스트 제외)
RUN gradle clean build -x test

# 2단계: 실행 스테이지 (OpenJDK 17 경량 이미지 사용)
FROM openjdk:17-jdk-slim

# 1단계에서 빌드된 market-follower 프로젝트의 JAR 파일을 복사
COPY --from=build /app/build/libs/*.jar app.jar

# 컨테이너가 시작되면 app.jar 파일을 실행하여 market-follower 애플리케이션 실행
ENTRYPOINT ["java", "-jar", "/app.jar"]
'''


4. AWS EC2에서 실행

$ ssh -i [YOUR_KEY].pem ubuntu@[EC2_PUBLIC_IP]
$ sudo apt update
$ sudo apt install -y docker.io
$ apt install curl -y
$ sudo usermod -aG docker $USER
$ newgrp docker


$ sudo apt install -y git
$ git clone https://github.com/your-username/market-follower.git
$ cd market-follower

$ docker build -t market-follower .

# 도커 실행
$ docker run -d -p 8080:8080 --name mf market-follower

# 도커 컨테이너 중지 및 삭제
$ docker rm -f mf

# 도커 상태 확인
$ docker ps -a

# 남아있는 도커 이미지 삭제
$ docker rmi market-follower


5. 깃허브 컨테이너 저장소로 이미지 저장
Dockerfile	    이미지 빌드 방법(환경, 빌드 과정 등) 명세
GHCR	        빌드 완료된 이미지를 저장하고 공유하는 원격 저장소

-> 이를 위해 우선 Access Token을 깃허브에서 발급
   (1) GHCR 사용하려면 Personal Access Token 만들 때
   write:packages, read:packages 권한 꼭 체크
   (2) GitHub Actions가 깃허브에서 이미지 빌드/푸시 하려면
   repo, workflow, packages 권한 포함해야 함

깃허브 컨테이너 저장소로 이미지를 저장하기 위해서는
프로젝트 루트에서 아래의 명령어가 실행된 이후
$ docker build -t market-follower .

다음의 과정을 거쳐야함

# 아이디: 내 깃허브 닉네임 / 비밀번호: 생성한 access token
$ docker login ghcr.io
$ docker tag market-follower ghcr.io/seongjun-working-directories/market-follower
$ docker push ghcr.io/seongjun-working-directories/market-follower

안된다면,
$ docker pull ghcr.io/seongjun-working-directories/market-follower:latest
$ docker run -d -p 8080:8080 --name mf ghcr.io/seongjun-working-directories/market-follower:latest

# 이 과정이 끝나면 ghcr.io/seongjun-working-directories/market-follower 여기서 확인 가능
# 이 링크에 들어가면, 무슨 레포지토리에 연결할거냐고 물어보는데 이때, market-follower 라는 스프링부트 프로젝트 레포지토리에 연결


6. 이후 GitHub Actions로 CI/CD 자동화하기 (스프링부트 + 도커 + GHCR 푸시)

.github/workflows/docker-publish.yml 파일을 만듦

'''
name: Build and Publish Docker Image

on:
  push:
    branches:
      - main   # main 브랜치에 push 될 때마다 실행

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/seongjun-working-directories/market-follower:latest
'''

단, 시크릿(secrets) 등록 방법
CR_PAT처럼 내가 만든 토큰 등 민감한 정보는
GitHub 리포지토리 → Settings > Secrets and variables > Actions > New repository secret 에 가서 등록

Name: CR_PAT
Value: Personal Access Token (토큰 문자열)

저장 후 워크플로우에서 ${{ secrets.CR_PAT }}로 참조


7. EC2에 배포 자동화

방법 1. GitHub Actions에서 EC2 SSH 접속 후 명령 실행
필요한 것
- EC2 접속용 SSH 키를 GitHub Secrets에 등록 (EC2_SSH_KEY 등)
- EC2 Public IP 또는 도메인
- EC2 사용자명 (보통 ubuntu 또는 ec2-user)

'''(deploy.yml -> docker-publish.yml과 동일한 경로에 저장)
name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ghcr.io/seongjun-working-directories/market-follower:latest
            docker rm -f mf || true
            docker run -d -p 8080:8080 --name mf ghcr.io/seongjun-working-directories/market-follower:latest
'''

GitHub Secrets 등록 방법
GitHub 리포지토리 페이지로 이동
(예: https://github.com/사용자명/리포지토리명)

상단 탭에서 Settings 클릭

왼쪽 메뉴에서 Secrets and variables > Actions 클릭
오른쪽 상단에 New repository secret 버튼 클릭

아래 3개의 시크릿을 각각 등록
EC2_HOST	    EC2 퍼블릭 IP 또는 도메인	EC2 서버 접속용 호스트 주소
EC2_USER	    EC2 접속 사용자명 (ex: ubuntu)	EC2 서버 로그인할 유저명
EC2_SSH_KEY	    PEM 개인 키 파일 내용 (개인 키 전체 텍스트)	EC2 접속용 SSH 개인 키 (줄바꿈 포함)


[AWS EC2 보안 그룹 문제]
EC2 인스턴스에 연결된 보안 그룹(Security Group) 에서
포트 8080에 대해 인바운드 허용이 반드시 되어 있어야 합니다.
AWS 콘솔에서 EC2 → 해당 인스턴스 → 보안 그룹 → 인바운드 규칙
규칙에 TCP 프로토콜, 8080 포트, 소스는 0.0.0.0/0 (모두 허용) 또는 특정 IP 범위가 있어야 합니다.

