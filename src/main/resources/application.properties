spring.application.name=market-follower

# JPA 가 자동으로 테이블 만들지 않도록 설정
# 엔티티 클래스(@Entity)와 실제 DB 테이블 구조를 비교해서 검증만 진행
spring.jpa.hibernate.ddl-auto=validate

# 대신, Spring Boot가 실행될 때 schema.sql, data.sql 을 항상 실행
# 따라서, IF NOT EXISTS로 보호해둠
spring.sql.init.mode=always

# Actuator Health 상세 정보 노출(/actuator/health)
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

# Kafka 브로커 주소 (EC2 퍼블릭 IP와 포트)
spring.kafka.bootstrap-servers=43.201.3.45:9092

# Kafka Consumer 그룹 아이디 설정
spring.kafka.consumer.group-id=upbit-group
# Kafka Consumer 시작 오프셋을 가장 오래된 메시지부터 읽기
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Kafka Producer 설정
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Kafka Producer 메모리 설정
# 총 메모리 버퍼 크기를 64MB로 증가 (기본값: 32MB)
spring.kafka.producer.buffer-memory=67108864
# 배치 크기를 32KB로 설정 (기본값: 16KB)
spring.kafka.producer.batch-size=32768
# 최대 블로킹 시간을 30초로 단축 (기본값: 60초)
spring.kafka.producer.max-block-ms=30000
# 전송 타임아웃 30초
spring.kafka.producer.delivery-timeout-ms=30000
# 요청 타임아웃 15초
spring.kafka.producer.request-timeout-ms=15000
# 배치가 가득 차지 않아도 1000ms 후에 강제로 전송
spring.kafka.producer.linger-ms=1000
# 리더 브로커만 메시지 수신 확인하면 ACK 전송
spring.kafka.producer.acks=1
# 전송 실패 시 재시도 횟수를 1회로 제한
spring.kafka.producer.retries=1
# Kafka Producer 최대 메시지 크기 2MB
spring.kafka.producer.max-request-size=2097152

# Redis 설정
spring.redis.host=43.201.3.45
spring.redis.port=6379