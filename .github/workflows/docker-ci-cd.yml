name: CI/CD (Build + Publish + Deploy Docker Image)

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          no-cache: true
          tags: ghcr.io/${{ github.repository }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 소스 코드 업데이트 (market-follower 디렉토리로 이동)
            cd ~/market-follower
            git pull https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
            
            # GitHub Container Registry 로그인
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 기존 Kafka, Zookeeper 컨테이너 중지 및 삭제
            docker-compose -f infra/docker-compose.kafka.yml down
  
            # Kafka, Zookeeper 컨테이너 시작
            docker-compose -f infra/docker-compose.kafka.yml up -d
            
            # Kafka 시작 대기 (이 부분 추가!)
            until docker exec kafka kafka-topics.sh --list --bootstrap-server 127.0.0.1:9092 2>/dev/null; do
              echo "Waiting for Kafka..."
              sleep 3
            done
            echo "Kafka is ready!"
            
            # 기존 upbit-ticker-topic 삭제
            docker exec kafka kafka-topics.sh --delete \
              --topic upbit-ticker-topic \
              --bootstrap-server 127.0.0.1:9092 || true
            
            # upbit-ticker-topic 재생성
            docker exec kafka kafka-topics.sh --create \
              --topic upbit-ticker-topic \
              --bootstrap-server 127.0.0.1:9092 \
              --partitions 3 \
              --replication-factor 1 \
              --config retention.ms=600000 \
              --config segment.bytes=5242880 \
              --config segment.ms=60000
            
            # 기존 upbit-orderbook-topic 삭제
            docker exec kafka kafka-topics.sh --delete \
              --topic upbit-orderbook-topic \
              --bootstrap-server 127.0.0.1:9092 || true
            
            # upbit-orderbook-topic 재생성
            docker exec kafka kafka-topics.sh --create \
              --topic upbit-orderbook-topic \
              --bootstrap-server 127.0.0.1:9092 \
              --partitions 3 \
              --replication-factor 1 \
              --config retention.ms=600000 \
              --config segment.bytes=5242880 \
              --config segment.ms=60000
              --config max.message.bytes=2097152
            
            # Redis 컨테이너 중지 및 삭제
            docker-compose -f infra/docker-compose.redis.yml down
            
            # Redis 컨테이너 시작
            docker-compose -f infra/docker-compose.redis.yml up -d
            
            # MySQL 컨테이너 시작 (파일 볼륨 사용)
            docker-compose -f infra/docker-compose.mysql.yml up -d
            
            # MySQL 시작을 위해 일시 대기
            until docker exec mysql mysqladmin ping -uuser -p1234 --silent; do
              echo "Waiting for MySQL..."
              sleep 2
            done
            
            docker pull ghcr.io/seongjun-working-directories/market-follower:latest
            docker rm -f mf || true
            docker run -d --network host --name mf \
              -e SPRING_REDIS_HOST=127.0.0.1 \
              -e SPRING_REDIS_PORT=6379 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_KAFKA_PRODUCER_MAX_REQUEST_SIZE=2097152 \
              -e JAVA_OPTS="-Xmx2g -Xms1g" \
              ghcr.io/seongjun-working-directories/market-follower:latest
            
            # 사용하지 않는 이미지 정리
            docker image prune -f